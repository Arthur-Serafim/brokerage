generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  createdAt       DateTime          @default(now())
  walletBalances  WalletBalance[]
  brokerageValues BrokerageValue[]
  positions       Position[]
  transactions    Transaction[]
}

model Position {
  id           String   @id @default(uuid())
  symbol       String
  name         String
  shares       Int
  avgPrice     Float
  currentPrice Float
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model WalletBalance {
  id      String   @id @default(uuid())
  date    DateTime @default(now())
  balance Float
  user    User     @relation(fields: [userId], references: [id])
  userId  String
}

model BrokerageValue {
  id      String   @id @default(uuid())
  date    DateTime @default(now())
  value   Float
  user    User     @relation(fields: [userId], references: [id])
  userId  String
}

model Symbol {
  id        String   @id @default(uuid())
  symbol    String   @unique
  name      String
  price     Float
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(uuid())
  type        String   // "BUY" | "SELL" | "DEPOSIT" | "WITHDRAWAL"
  symbol      String?  // Stock symbol (null for deposits/withdrawals)
  shares      Int?     // Number of shares (null for deposits/withdrawals)
  pricePerShare Float? // Price per share (null for deposits/withdrawals)
  amount      Float    // Total amount
  from        String   // "WALLET" | "BROKERAGE" | "EXTERNAL"
  to          String   // "WALLET" | "BROKERAGE" | "EXTERNAL"
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}